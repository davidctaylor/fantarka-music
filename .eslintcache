[{"/Users/davidtaylor/stash_projects/fantarka-music/src/index.tsx":"1","/Users/davidtaylor/stash_projects/fantarka-music/src/store/store.ts":"2","/Users/davidtaylor/stash_projects/fantarka-music/src/components/player/player.tsx":"3","/Users/davidtaylor/stash_projects/fantarka-music/src/store/root-reducer.ts":"4","/Users/davidtaylor/stash_projects/fantarka-music/src/components/player/player-slice.ts":"5","/Users/davidtaylor/stash_projects/fantarka-music/src/components/effects/scroll.tsx":"6","/Users/davidtaylor/stash_projects/fantarka-music/src/components/player-track-name/player-track-name.tsx":"7","/Users/davidtaylor/stash_projects/fantarka-music/src/components/background/player-background.tsx":"8","/Users/davidtaylor/stash_projects/fantarka-music/src/components/list/track-list.tsx":"9","/Users/davidtaylor/stash_projects/fantarka-music/src/components/controls/player-controls.tsx":"10","/Users/davidtaylor/stash_projects/fantarka-music/src/components/social-bar/social-bar.tsx":"11","/Users/davidtaylor/stash_projects/fantarka-music/src/lib/Particle.tsx":"12","/Users/davidtaylor/stash_projects/fantarka-music/src/lib/utils.ts":"13","/Users/davidtaylor/stash_projects/fantarka-music/src/lib/index.tsx":"14","/Users/davidtaylor/stash_projects/fantarka-music/src/components/control-button/control-button.tsx":"15","/Users/davidtaylor/stash_projects/fantarka-music/src/icons/soundcloud-icon.tsx":"16"},{"size":490,"mtime":1608163818108,"results":"17","hashOfConfig":"18"},{"size":580,"mtime":1608163818111,"results":"19","hashOfConfig":"18"},{"size":4444,"mtime":1608163818106,"results":"20","hashOfConfig":"18"},{"size":263,"mtime":1608163818111,"results":"21","hashOfConfig":"18"},{"size":3006,"mtime":1608163818106,"results":"22","hashOfConfig":"18"},{"size":764,"mtime":1608163818102,"results":"23","hashOfConfig":"18"},{"size":6647,"mtime":1608163818105,"results":"24","hashOfConfig":"18"},{"size":4668,"mtime":1608229024806,"results":"25","hashOfConfig":"18"},{"size":2954,"mtime":1608163818102,"results":"26","hashOfConfig":"18"},{"size":2067,"mtime":1608163818102,"results":"27","hashOfConfig":"18"},{"size":1276,"mtime":1608163818107,"results":"28","hashOfConfig":"18"},{"size":3316,"mtime":1608163818109,"results":"29","hashOfConfig":"18"},{"size":492,"mtime":1608163818110,"results":"30","hashOfConfig":"18"},{"size":79,"mtime":1608163818110,"results":"31","hashOfConfig":"18"},{"size":1485,"mtime":1608163818101,"results":"32","hashOfConfig":"18"},{"size":1775,"mtime":1608163818107,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},"1rt221w",{"filePath":"38","messages":"39","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"37"},{"filePath":"59","messages":"60","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"37"},{"filePath":"65","messages":"66","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"37"},{"filePath":"68","messages":"69","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"37"},{"filePath":"71","messages":"72","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"37"},{"filePath":"74","messages":"75","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"37"},{"filePath":"77","messages":"78","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"37"},{"filePath":"80","messages":"81","errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},"/Users/davidtaylor/stash_projects/fantarka-music/src/index.tsx",["83","84"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport Player from './components/player/player';\nimport store from './store/store';\n\nimport './index.scss';\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <Player />\n    </Provider>,\n    document.getElementById('root')\n  )\n}\n\nrender();\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./components/player/player', render)\n}\n",["85","86"],"/Users/davidtaylor/stash_projects/fantarka-music/src/store/store.ts",["87","88"],"import { configureStore, Action } from '@reduxjs/toolkit'\nimport { ThunkAction } from 'redux-thunk'\n\nimport rootReducer, { RootState } from './root-reducer'\n\nconst store = configureStore({\n  reducer: rootReducer\n})\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./root-reducer', () => {\n    const newRootReducer = require('./root-reducer').default\n    store.replaceReducer(newRootReducer)\n  })\n}\n\nexport type AppDispatch = typeof store.dispatch\n\nexport type AppThunk = ThunkAction<void, RootState, unknown, Action<string>>\n\nexport default store\n","/Users/davidtaylor/stash_projects/fantarka-music/src/components/player/player.tsx",["89","90","91"],"import React, {\n  CSSProperties,\n  useEffect,\n  useState\n} from 'react'\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux'\n\nimport SC from 'soundcloud';\nimport SoundCloudAudio from 'soundcloud-audio';\n\nimport { TrackList } from 'components/list/track-list';\nimport { RootState } from 'store/root-reducer';\nimport {\n  Track,\n  PlayerControlType,\n  ScrollPosition,\n  AudioStateType\n} from 'interfaces/index';\nimport { useScrollPosition } from 'components/effects/scroll';\nimport { PlayerBackground } from 'components/background/player-background';\nimport { PlayerControls } from 'components/controls/player-controls';\nimport { PlayerTrackName } from 'components/player-track-name/player-track-name';\nimport { SocialBar } from 'components/social-bar/social-bar';\n\nimport {\n  fetchTracks,\n  trackProgress,\n  audioPlayPlayTrack,\n  playerControls,\n} from './player-slice';\nimport './player.scss';\n\nconst SOUNDCLOUD_CLIENT = '904ef8653a4252c494b98c310300b467';\n//const FANTARKA_SECRET = '578b9b29f07344fc61207d551082dd72';\nconst SOUNDCLOUD_USER_ID = '81132380';\n\nconst useSoundCloudPlayer = (): any => {\n  const dispatch = useDispatch();\n  const [player, setPlayer] = useState<any>(null);\n  if (!player) {\n    const player = new SoundCloudAudio(SOUNDCLOUD_CLIENT);\n    let last: number = -1;\n\n    player.audio.crossOrigin = 'anonymous';\n    player.on('timeupdate', (time: number) => {\n      const progress: number = (player.audio.currentTime / player.audio.duration) * 100;\n      if (progress !== last) {\n        dispatch(trackProgress((player.audio.currentTime / player.audio.duration) * 100 || 0));\n        last = progress;\n      }\n    });\n    setPlayer(player);\n  }\n\n  return player;\n};\n\nconst Player: React.FC = () => {\n  const isLoaded: boolean = useSelector((state: RootState) => state.player.tracksLoaded);\n  const tracks: Track[] = useSelector((state: RootState) => state.player.tracks);\n  const trackActive: number = useSelector((state: RootState) => state.player.trackActive);\n  const activeAudioState: AudioStateType | null = useSelector((state: RootState) => state.player.audioState);\n  const controlAction: PlayerControlType = useSelector((state: RootState) => state.player.controlAction);\n  const dispatch = useDispatch();\n  const player = useSoundCloudPlayer();\n  const [scrollPosition, setScrollPosition] = useState<ScrollPosition>({x: 0, y: 0, w: 0, h: 0});\n\n\n  SC.initialize({\n    client_id: SOUNDCLOUD_CLIENT\n  });\n\n  useEffect(() => {\n    if (!isLoaded) {\n      dispatch(fetchTracks(SOUNDCLOUD_USER_ID, SOUNDCLOUD_CLIENT));\n    }\n  }, [dispatch, isLoaded]);\n\n  useEffect(() => {\n    if (controlAction && controlAction !== 'idle') {\n      switch(controlAction) {\n        case 'previous':\n        case 'next':\n          if (activeAudioState !== 'stopped') {\n            dispatch(audioPlayPlayTrack(player, tracks[trackActive].stream_url));\n          }\n          break;\n        case 'play':\n          dispatch(audioPlayPlayTrack(player, tracks[trackActive].stream_url));\n          break;\n        case 'pause':\n          dispatch(audioPlayPlayTrack(player));\n      }\n    }\n  }, [dispatch, controlAction, player, tracks, trackActive, activeAudioState]);\n\n  useEffect(\n    () => {\n      if (activeAudioState === 'stopped') {\n        const timer = setInterval(() => dispatch(playerControls('next' as PlayerControlType)), 5000);\n        return () => clearInterval(timer);\n      }\n    },\n    [activeAudioState]\n  );\n\n  useScrollPosition(['scroll'], setScrollPosition);\n\n  const containerStyle: CSSProperties = {\n    transform: `scale(${Math.max(0, 1 - (scrollPosition.y / 500))})`,\n  };\n\n  return <div className=\"player-container\">\n    <div className=\"container-sticky-content\" style={containerStyle}>\n      <PlayerBackground width={window.innerWidth} height={window.innerHeight} url={'./fantarka-avatar.jpg'}/>\n      <div className=\"content-header\">Fantarka</div>\n      <div className=\"content-main\">\n        <PlayerControls />\n        <PlayerTrackName />\n        <div className=\"container-indicator\">\n          <div className=\"indicator-line\"></div>\n          <div className=\"indicator-sphere\"></div>\n        </div>\n      </div>\n      {/*<div className=\"content-footer\">*/}\n      {/*  <div style={{width: '10px', borderWidth: '2px', borderRightColor: 'green', height: '20px'}}></div>*/}\n      {/*</div>*/}\n    </div>\n\n    <TrackList onClick={(e) => console.log('XXX CLICKED')}/>\n    <SocialBar/>\n  </div>\n}\n\nexport default Player\n","/Users/davidtaylor/stash_projects/fantarka-music/src/store/root-reducer.ts",["92","93"],"import { combineReducers } from '@reduxjs/toolkit'\n\nimport playerReducer from 'components/player/player-slice';\n\nconst rootReducer = combineReducers({\n  player: playerReducer,\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","/Users/davidtaylor/stash_projects/fantarka-music/src/components/player/player-slice.ts",["94","95"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport SC from 'soundcloud';\n\nimport { AppThunk } from 'store/store'\nimport { Track, PlayerControlType, AudioStateType } from 'interfaces/index';\n\ninterface PlayerState {\n  audioState: AudioStateType;\n  controlAction: PlayerControlType;\n  error: string | null;\n  tracks: Track[];\n  tracksLoaded: boolean;\n  trackActive: number;\n  trackProgress: number;\n}\n\nconst loadTracks = (userId: string, clientId: string): Promise<Track[]> => {\n  return SC.get(`/users/${userId}/tracks/`, {\n    client_id: clientId,\n    limit: 100\n  });\n};\n\nconst loadTracksFailed = (state: PlayerState, action: PayloadAction<string>) => {\n  state.error = action.payload;\n};\n\nconst playerInitialState: PlayerState = {\n  audioState: 'stopped',\n  controlAction: 'idle',\n  error: null,\n  tracks: [],\n  tracksLoaded: false,\n  trackActive: 0,\n  trackProgress: 0,\n};\n\nconst playerSlice = createSlice({\n  name: 'player',\n  initialState: playerInitialState,\n  reducers: {\n    audioState(state: PlayerState, action: PayloadAction<AudioStateType>) {\n      state.audioState = action.payload;\n    },\n    getTracksSuccess(state, { payload }: PayloadAction<Track[]>) {\n      state.error = null;\n      state.tracks = payload;\n      state.tracksLoaded = true;\n    },\n    getTracksFailure: loadTracksFailed,\n    playerControls(state: PlayerState, action: PayloadAction<PlayerControlType>) {\n      switch (action.payload) {\n        case 'previous':\n          state.trackActive = state.trackActive - 1 > -1 ? state.trackActive - 1 : state.tracks.length -1;\n          break;\n        case 'next':\n          state.trackActive = state.tracks.length > state.trackActive + 1 ? state.trackActive + 1  : 0;\n          break;\n      }\n      state.controlAction = action.payload;\n    },\n    trackActive(state: PlayerState, action: PayloadAction<number>) {\n      state.trackActive = action.payload;\n    },\n    trackProgress(state: PlayerState, action: PayloadAction<number>) {\n      state.trackProgress = action.payload;\n    }\n  }\n});\n\nexport const {\n  getTracksSuccess,\n  getTracksFailure,\n  audioState,\n  playerControls,\n  trackActive,\n  trackProgress\n} = playerSlice.actions;\n\nexport default playerSlice.reducer;\n\nexport const audioPlayPlayTrack = (player: any, url?: string): AppThunk => async dispatch => {\n  let state: AudioStateType = 'stopped';\n  if (!url) {\n    player.pause();\n  } else {\n    state = await player\n      .play({streamUrl: url})\n      .then((v: any) => 'playing', (v: any) => 'stopped');\n  }\n  dispatch(audioState(state));\n}\n\nexport const fetchTracks = (userId: string, clientId: string): AppThunk => async dispatch => {\n  try {\n    let tracks: Track[] = await loadTracks(userId, clientId);\n    tracks = tracks.map((t: Track) => {\n      return {\n        ...t,\n        artwork_url: t.artwork_url ? t.artwork_url.replace('-large', '-t500x500') : null,\n      };\n    });\n\n    dispatch(getTracksSuccess(tracks));\n  } catch (err) {\n    dispatch(getTracksFailure(err.toString()))\n  }\n};\n","/Users/davidtaylor/stash_projects/fantarka-music/src/components/effects/scroll.tsx",["96","97"],"import { useEffect} from 'react';\n\nimport { from,  fromEvent, Subscription } from 'rxjs';\nimport { map, mergeMap} from 'rxjs/operators';\n\nimport { ScrollPosition } from 'interfaces/index';\n\nexport const useScrollPosition = (types: string[], callBack: (y: ScrollPosition) => void) => {\n  useEffect(() => {\n    const sub: Subscription = from(types)\n      .pipe(\n        mergeMap((eventType: string) => fromEvent(window, eventType)),\n        map((event: Event): ScrollPosition => ({\n          x: window.pageXOffset,\n          y: window.pageYOffset,\n          w: window.innerWidth,\n          h: window.innerHeight\n        }))\n      )\n      .subscribe((e: ScrollPosition) => callBack(e));\n\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [types, callBack]);\n};\n","/Users/davidtaylor/stash_projects/fantarka-music/src/components/player-track-name/player-track-name.tsx",["98","99","100"],"import React, {\n  Ref,\n  useEffect,\n  useRef,\n  useState\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  Track\n} from \"../../interfaces\";\nimport { Particle } from '../../lib/Particle';\n\nimport { RootState } from 'store/root-reducer';\n\nimport './player-track-name.scss';\nconst TEXT_SIZE = 23,\n  TEXT_SPACE = 15,\n  TEXT_TOP_OFFSET = TEXT_SIZE;\n\ninterface TrackData {\n  title: string;\n  index: number,\n  particles: Particle[],\n  animate: {\n    f?: (\n      trackData: TrackData,\n      particle: Particle,\n      textMetrics: TextMetrics,\n      width: number) => void, textMetrics: TextMetrics\n  },\n}\n\nconst createTrackObject = (key: number, particles: Particle[], textMetrics: TextMetrics, t: string): TrackData => (\n  {index: key, particles: particles, animate: {textMetrics: textMetrics}, title: t});\n\nconst initializeCanvas = (ref: Ref<HTMLCanvasElement>, tracks: Track[]): TrackData[] => {\n  // @ts-ignore\n  const box: DOMRect = ref.current.parentNode.getBoundingClientRect();\n  // @ts-ignore\n  const ctx: CanvasRenderingContext2D = ref.current.getContext('2d');\n  // @ts-ignore\n  ref.current.width = box.width;\n  // @ts-ignore\n  ref.current.height = box.height;\n\n  // @ts-ignore\n  const width: number = box.width;\n  // @ts-ignore\n  const height: number = box.height;\n\n  ctx.fillStyle = '#f8f8ff';\n  ctx.font = `${TEXT_SIZE}px Syncopate`;\n  ctx.textBaseline = 'middle';\n\n  return tracks.map((track: Track, idx: number): TrackData => {\n    let textMetrics: TextMetrics = ctx.measureText(track.title);\n    ctx.fillText(track.title,\n      0,\n      Math.round(TEXT_SIZE + TEXT_SPACE) * (idx + 1));\n\n    return createTrackObject(\n      idx,\n      createParticleArray(ref, width, height),\n      textMetrics,\n      track.title\n    );\n  });\n}\n\nconst createParticleArray = (ref: Ref<HTMLCanvasElement>, width: number, height: number): Particle[] => {\n  // @ts-ignore\n  const ctx: CanvasRenderingContext2D = ref.current.getContext('2d');\n  const imageData: ImageData = ctx.getImageData(0, 0, width, height);\n  const imageBuffer: Uint32Array = new Uint32Array(imageData.data.buffer);\n  const particles: Particle[] = [];\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n\n      let color = imageBuffer[y * width + x];\n      if (color) {\n        particles.push(new Particle({\n          color: ''+color,\n          x: -1,\n          y: -1,\n          hx: x,\n          hy: y,\n        }));\n      }\n    }\n  }\n  return particles;\n}\n\nconst animate = (ref: Ref<HTMLCanvasElement>, trackData: TrackData[]) => {\n  // @ts-ignore\n  const width = ref.current.width;\n  // @ts-ignore\n  const height = ref.current.height;\n\n  // @ts-ignore\n  const ctx: CanvasRenderingContext2D = ref.current.getContext('2d');\n  ctx.clearRect(0, 0, width, height);\n\n  const imageData: ImageData = ctx.createImageData(width, height);\n  const pixels: Uint32Array  = new Uint32Array(imageData.data.buffer);\n\n  trackData.forEach((track: TrackData) => {\n    animateTrackParticles(pixels, track, height, width);\n  });\n\n  ctx.putImageData(imageData, 0, 0);\n  requestAnimationFrame(() => animate(ref, trackData));\n}\n\nconst animateTrackRemove = (trackData: TrackData, particle: Particle, textMetrics: TextMetrics) => {\n  particle.gravity += Math.max(Math.random() * 0.002, 0.001);\n  //particle.gravity = particle.y * 0.0002;//Math.max(Math.random() * 0.2, 0.1);\n}\n\nconst animateTrackActive = (trackData: TrackData, particle: Particle, textMetrics: TextMetrics, width: number) => {\n  let direction = {\n      x: (width / 2 ) - (trackData.animate.textMetrics.width / 2) + (particle.hx - particle.x),\n      y: (particle.hy - ((TEXT_SIZE + TEXT_SPACE) * (trackData.index + 1))) + (TEXT_TOP_OFFSET) - particle.y\n      //y: (particle.hy - ((TEXT_SIZE + TEXT_SPACE) * (trackObject.index + 1))) + (height / 2) - particle.y\n    };\n  const distance = Math.sqrt(direction.x * direction.x + direction.y * direction.y );\n  const speed = Math.random() * (distance > 1 ? Math.max(distance / 2, 5) : distance);\n\n  direction = Particle.normalize(direction);\n  direction.x = direction.x * speed;\n  direction.y = direction.y * speed;\n\n  particle.x += direction.x;\n  particle.y += direction.y;\n}\n\nconst animateTrackParticles = (pixels: Uint32Array, trackObject: TrackData, canvasHeight: number, canvasWidth: number) => {\n  trackObject.particles.forEach((particle) => {\n    const x = Math.round(particle.x);\n    const y = Math.round(particle.y);\n\n    if (x >= 0 && x < canvasWidth && y >= 0 && y < canvasHeight) {\n      pixels[x + canvasWidth * y] = +particle.color;\n\n      if (trackObject.animate.f) {\n        trackObject.animate.f(\n          trackObject,\n          particle,\n          trackObject.animate.textMetrics,\n          canvasWidth);\n\n        particle.update();\n      }\n    }\n  });\n}\n\nconst setTrackNext = (ref: Ref<HTMLCanvasElement>, trackData: TrackData) => {\n  // @ts-ignore\n  const width = ref.current.width;\n\n  trackData.animate.f = animateTrackActive;\n  trackData.particles.forEach((particle: Particle) => {\n    particle.vx = 0;\n    particle.vy = 0;\n    particle.gravity = 0;\n    particle.x = (width * 0.5);\n    particle.y = TEXT_TOP_OFFSET;\n  });\n}\n\nconst setTrackIdle = (trackObject: TrackData) => {\n  trackObject.animate.f = animateTrackRemove;\n\n  trackObject.particles.forEach((particle: Particle) => {\n    particle.gravity = particle.y * Math.max(Math.random() * 0.003, 0.001);\n    //particle.vy += 0.005;\n  });\n}\n\nexport const PlayerTrackName = () => {\n  const tracks: Track[] = useSelector((state: RootState) => state.player.tracks);\n  const trackActive: number = useSelector((state: RootState) => state.player.trackActive);\n  const canvasRef: Ref<HTMLCanvasElement> = useRef<HTMLCanvasElement>(null);\n  const [trackParticles, setTrackParticles] = useState<TrackData[]>([]);\n  const [previousTrackActive, setPreviousTrackActive] = useState<number>(0);\n\n  useEffect(() => {\n    if (tracks.length === 0) {\n      return;\n    }\n    const data: TrackData[] = initializeCanvas(canvasRef, tracks);\n    setTrackParticles(data);\n    setTrackNext(canvasRef, data[0]);\n    animate(canvasRef, data);\n  }, [tracks]);\n\n  const nextTrack = useEffect(() => {\n    if (tracks.length === 0 || trackActive === previousTrackActive) {\n      return;\n    }\n    setTrackNext(canvasRef, trackParticles[trackActive]);\n    setTrackIdle(trackParticles[previousTrackActive]);\n  }, [previousTrackActive, trackActive, trackParticles]);\n\n  useEffect(() => {\n    setPreviousTrackActive(trackActive);\n  }, [nextTrack, trackActive]);\n\n  return (\n    <div className='track-name-container'>\n      <div className='container-canvas'>\n        <canvas ref={canvasRef}/>\n      </div>\n    </div>);\n}\n","/Users/davidtaylor/stash_projects/fantarka-music/src/components/background/player-background.tsx",["101","102"],"import React, {\n  useEffect,\n  useRef,\n  useState,\n  Ref\n} from 'react';\n\nimport { Particle, rgbToString } from 'lib/index';\nimport { useScrollPosition } from 'components/effects/scroll';\nimport { ScrollPosition } from 'interfaces/index';\nimport './player-background.scss';\n\nconst SPACING = 4;\n\nconst loadBackgroundImage = (url: string): Promise<HTMLImageElement> => {\n  const image: HTMLImageElement = new Image();\n  const promise = new Promise<HTMLImageElement>((fulfill, fail) => {\n    image.onload = () => fulfill(image);\n    image.onerror = (...err) => fail(err);\n  });\n\n  image.src = url;\n\n  return promise;\n};\n\nconst getPixelColor = (data: ImageData, x: number, y: number): string => {\n  let idx = ((data.width * y) + x) * 4;\n  return rgbToString(data.data[idx], data.data[idx + 1], data.data[idx + 2], data.data[idx + 3]);\n}\n\nconst createParticles = (ref: Ref<HTMLCanvasElement>, data: ImageData): Particle[] => {\n  const particles: Particle[] = [];\n  // @ts-ignore\n  // @ts-ignore\n  let width = ref.current.width;\n  // @ts-ignore\n  let height = ref.current.height;\n\n  for (let x = 0; x < width / 4; x += 1) {\n    for (let y = 0; y < height / 4; y += 1) {\n      particles.push(new Particle({\n        color: getPixelColor(data, x, y),\n        x: width / 2,\n        y: height / 2,\n        hx: x * SPACING,\n        hy: y * SPACING,\n      }));\n    }\n  }\n  return particles\n};\n\nconst animate = (ref: Ref<HTMLCanvasElement>, particles: Particle[], isLoading: boolean): void => {\n  if (isLoading) {\n    // @ts-ignore\n    const ctx: CanvasRenderingContext2D = ref.current.getContext('2d');\n    // @ts-ignore\n    ctx.clearRect(0, 0, ref.current.width, ref.current.height);\n\n    if (animateInitial(ref, particles)) {\n      requestAnimationFrame(() => animate(ref, particles, true));\n    }\n  }\n}\n\nconst animateInitial = (ref: Ref<HTMLCanvasElement>, particles: Particle[]): boolean => {\n  let isLoading = true;\n  particles.forEach((particle: Particle) => {\n    let direction = {x: particle.hx - particle.x, y: particle.hy - particle.y},\n      distance = Math.sqrt(direction.x * direction.x + direction.y * direction.y),\n      speed = Math.random() * (distance > 1 ? Math.min(distance, 100) : distance);\n\n    direction = Particle.normalize(direction);\n    direction.x = direction.x * speed;\n    direction.y = direction.y * speed;\n\n    particle.x += direction.x;\n    particle.y += direction.y;\n\n    isLoading = distance > 0;\n\n    drawParticle(ref, particle);\n  });\n  return isLoading;\n}\n\nconst drawParticle = (ref: Ref<HTMLCanvasElement>, particle: Particle) => {\n  // @ts-ignore\n  const ctx: CanvasRenderingContext2D = ref.current.getContext('2d');\n  const particleSize = 2;\n  ctx.fillStyle = particle.color;\n  ctx.fillRect(particle.x, particle.y, particleSize, particleSize);\n}\n\ninterface PlayerBackgroundProps {\n  url: string;\n  width: number;\n  height: number;\n}\n\nexport const PlayerBackground = ({url, width, height}: PlayerBackgroundProps) => {\n  const canvasRef: Ref<HTMLCanvasElement> = useRef<HTMLCanvasElement>(null);\n  const [scrollPosition, setScrollPosition] = useState<ScrollPosition>({x: 0, y: 0, w: 0, h: 0});\n\n  useScrollPosition(['resize'], setScrollPosition);\n\n  useEffect(() => {\n    loadBackgroundImage(url)\n      .then((img: HTMLImageElement) => {\n          // @ts-ignore\n          const box = canvasRef.current.parentNode.getBoundingClientRect();\n          // @ts-ignore\n          canvasRef.current.width = box.width;\n          // @ts-ignore\n          canvasRef.current.height = box.height;\n          // @ts-ignore\n          let width = box.width / 4;\n          // @ts-ignore\n          let height = box.height / 4;\n          // @ts-ignore\n          const ctx: CanvasRenderingContext2D = canvasRef.current.getContext('2d');\n          ctx.drawImage(img, 0, 0, width, height);\n          const particles: Particle[] = createParticles(canvasRef, ctx.getImageData(0, 0, width, height));\n          animate(canvasRef, particles, true);\n        },\n        (err) => console.log('Error loading image:', err)\n      );\n  }, [url]);\n\n  useEffect(() => {\n    const img: HTMLImageElement = new Image();\n    img.onload = () => {\n      // @ts-ignore\n      canvasRef.current.width = scrollPosition.w;\n      // @ts-ignore\n      canvasRef.current.height = scrollPosition.h;\n      // @ts-ignore\n      const ctx: CanvasRenderingContext2D = canvasRef.current.getContext('2d');\n      ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, scrollPosition.w, scrollPosition.h);\n    }\n    // @ts-ignore\n    img.src = canvasRef.current.toDataURL();\n\n  }, [scrollPosition]);\n\n  return (\n    <div className='player-background-image'>\n      <canvas ref={canvasRef}/>\n    </div>);\n};\n","/Users/davidtaylor/stash_projects/fantarka-music/src/components/list/track-list.tsx",["103","104"],"import React, {\n  useEffect,\n  useState,\n  CSSProperties,\n  useRef\n} from 'react'\nimport {\n  useDispatch,\n  useSelector,\n} from 'react-redux'\n\nimport { RootState } from 'store/root-reducer'\nimport { useScrollPosition } from 'components/effects/scroll';\nimport { ScrollPosition, Track } from 'interfaces/index';\nimport { handleOnShareEvent } from 'lib/utils';\nimport {\n  playerControls,\n  trackActive\n} from 'components/player/player-slice';\nimport './track-list.scss';\n\ninterface TrackListProps {\n  onClick: (e: any) => void;\n}\n\nexport const TrackList = ({onClick }: TrackListProps) => {\n  const dispatch = useDispatch();\n\n  const tracks: Track[] = useSelector((state: RootState) => state.player.tracks);\n  const refTrackDesc = useRef<HTMLDivElement>(null);\n  const [trackDescHeight, setTrackDescHeight] = useState<number>(0);\n  const refTrackList = useRef<HTMLDivElement>(null);\n  const [scrollPosition, setScrollPosition] = useState<ScrollPosition>({x: 0, y: 0, w: 0, h: 0});\n\n  useScrollPosition(['scroll'], setScrollPosition);\n\n  // @ts-ignore\n  useEffect(() => setTrackDescHeight(refTrackDesc.current.clientHeight), []);\n\n  const containerStyle: CSSProperties = {\n    opacity: `${((trackDescHeight - (scrollPosition.y - scrollPosition.h * 0.4)) / trackDescHeight)}`, //`${Math.max(1, s)})`,\n  };\n\n  const handleOnClickEvent = (idx: number) => {\n    dispatch(playerControls('play'))\n    dispatch(trackActive(idx));\n  }\n\n  const renderedTracks = tracks.map((t: Track, i: number) => {\n    const imageStyle: CSSProperties = {\n      background: 'url(' + t.artwork_url + ') no-repeat center center',\n      backgroundSize: 'cover',\n    };\n\n    return <div key={i}  onClick={() => handleOnClickEvent(i)} className=\"track-container\">\n      {(() => {\n        if (t.artwork_url) {\n          return (<div className=\"container-image\">\n            <div className=\"image\" style={imageStyle}></div>\n          </div>)\n        } else {\n          return (<div className=\"container-image\"/>)\n        }\n      })()}\n      <div className=\"container-info\">\n        <div className=\"title\">{t.title}</div>\n        <div className=\"description\">{t.description}</div>\n      </div>\n    </div>\n  });\n\n  return <div id='container' className=\"scroll-container-tracks\" ref={refTrackList}>\n    <div className=\"tracks-description\" ref={refTrackDesc} style={containerStyle}>\n      <h1>About</h1>\n      <p>Originally from the UK, Fantarka is a Washington D.C. based EDM producer encompassing trance, house and ambient tracks.\n      </p>\n      <p>Also provides customised tracks to clients including national television networks.\n      </p>\n      <div className=\"description-separator\"></div>\n      <p>Contact us at <span onClick={() => handleOnShareEvent(null, 'email')} className='description-contact'>fantarkamusic@gmail.com</span> for purchasing from our library or customized tracks.\n      </p>\n    </div>\n    <div className=\"track-list-container\" >{renderedTracks}</div>\n  </div>\n}\n","/Users/davidtaylor/stash_projects/fantarka-music/src/components/controls/player-controls.tsx",["105","106"],"import React from 'react';\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux';\n\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { PlayerControlType, AudioStateType } from 'interfaces/index';\n\nimport { RootState } from 'store/root-reducer';\nimport { ControlButton, ControlsType } from 'components/control-button/control-button';\nimport { playerControls, trackProgress } from 'components/player/player-slice';\nimport './player-controls.scss';\n\nexport const PlayerControls = () => {\n  const dispatch = useDispatch();\n  const activeTrackProgress: number = useSelector((state: RootState) => state.player.trackProgress);\n  const activeAudioState: AudioStateType | null = useSelector((state: RootState) => state.player.audioState);\n\n  const handleOnClickEvent = (t: ControlsType) => {\n    let c: PlayerControlType | null = null;\n    switch(t) {\n      case 'previous':\n        c = t;\n        break;\n      case 'pause':\n        c = t;\n        break;\n      case 'play':\n        c = t;\n        break;\n      case 'next':\n        c = t;\n        break;\n    }\n    if (!c) {\n      return;\n    }\n    dispatch(playerControls(c))\n  };\n\n  const handleSliderEvent = (p: number) => {\n    dispatch(trackProgress(p));\n  };\n\n  return <div className='player-controls'>\n    <div className='controls-buttons'>\n      <ControlButton iconType={'previous'} onClick={handleOnClickEvent}/>\n      <ControlButton\n        iconType={activeAudioState === 'playing' ? 'pause' : 'play'}\n        onClick={handleOnClickEvent}/>\n      <ControlButton iconType={'next'} onClick={handleOnClickEvent}/>\n    </div>\n    <div className={`controls-progress ${activeAudioState === 'playing' || activeAudioState === 'paused' ? 'active' : ''}`}>\n      <Slider\n        min={0}\n        max={100}\n        defaultValue={10}\n        step={0.00001}\n        value={activeTrackProgress}\n        handleStyle={{\n          borderColor: 'white',\n          height: 12,\n          width: 12,\n          backgroundColor: 'white',\n        }}\n        onChange={handleSliderEvent}/>\n    </div>\n  </div>;\n}\n","/Users/davidtaylor/stash_projects/fantarka-music/src/components/social-bar/social-bar.tsx",["107","108"],"import React, { CSSProperties } from 'react';\nimport {\n  EmailIcon,\n  FacebookShareButton,\n  FacebookIcon,\n  TwitterShareButton,\n  TwitterIcon\n} from 'react-share';\nimport './social-bar.scss';\n\nimport { SoundCloudLogo } from 'icons/soundcloud-icon';\n\nimport { handleOnShareEvent } from 'lib/utils';\n\nconst ICON_SIZE = 32,\n  SHARE_URL = 'http://www.fantarka.com/',\n  SHARE_TITLE = 'Fantarka Music';\n\nexport const SocialBar = () => {\n  const imageStyle: CSSProperties = {\n    paddingLeft: '0.5em',\n    paddingRight: '0.5em',\n    paddingTop: '1px',\n  };\n\n  return (\n    <div className='social-bar-container'>\n      {/*\n        // @ts-ignore */}\n      <EmailIcon size={ICON_SIZE} round={true} onClick={(e: Event) => handleOnShareEvent(e, 'email')}/>\n      {/*\n        // @ts-ignore */}\n      <FacebookShareButton url={SHARE_URL} style={imageStyle} children={<FacebookIcon size={ICON_SIZE} round={true}/>}/>\n      {/*\n        // @ts-ignore */}\n      <TwitterShareButton url={SHARE_URL} style={imageStyle} title={SHARE_TITLE} children={<TwitterIcon size={ICON_SIZE} round={true}/>}/>\n      {/*  <TwitterIcon size={ICON_SIZE} round logoFillColor={ICON_COLOR}/>*/}\n      <SoundCloudLogo width={ICON_SIZE} onClick={(e: Event) => handleOnShareEvent(e, 'sound-cloud')}/>\n    </div>);\n};\n","/Users/davidtaylor/stash_projects/fantarka-music/src/lib/Particle.tsx",["109","110"],"export interface ParticleProps {\n  color: string;\n  x: number;\n  y: number;\n  hx: number;\n  hy: number;\n  // vx: number;\n  // vy: number;\n  // mass: number;\n  // friction: number;\n  // gravity: number;\n}\n\nexport interface ParticlePos {\n  x: number, y: number\n}\n\nexport class Particle {\n  public color: string;\n  public x: number;\n  public y: number;\n  public hx: number;\n  public hy: number;\n  public vx: number;\n  public vy: number;\n  public mass: number;\n  public friction: number;\n  public gravity: number;\n\n  constructor(props: ParticleProps) {\n    let speed = 1.5;// / 2, 10\n    this.color = props.color;\n    this.x = props.x;\n    this.y = props.y;\n    this.hx = props.hx;\n    this.hy = props.hy;\n    this.vx = 0; //Math.cos(Math.PI / 2) * speed;\n    this.vy = Math.sin(Math.PI / 2) * speed;\n    this.mass = 1;\n    this.friction = 1;\n    this.gravity = 0 / -Math.PI / 2;//properties.gravity || 0;\n  }\n\n  update() {\n    this.vx *= this.friction;\n    this.vy *= this.friction;\n    this.vy += this.gravity;\n    this.x += this.vx;\n    this.y += this.vy;\n  }\n\n  static lerp (v1: ParticlePos, v2: ParticlePos, alpha: number) {\n    v1.x += ( v2.x - v1.x ) * alpha;\n    v1.y += ( v2.y - v1.y ) * alpha;\n  }\n\n  static normalize(p: ParticlePos) {\n    const m = Math.sqrt(p.x * p.x + p.y * p.y);\n    if (m > 0) {\n      p.x = p.x / m;\n      p.y = p.y / m;\n    }\n    return p;\n  }\n\n  add(v: ParticlePos) {\n    return {x: this.x + v.x, y: this.y + v.y};\n  }\n\n  sub(v: ParticlePos) {\n    return {x: this.x - v.x, y: this.y - v.y};\n  }\n\n  static divide(v1: ParticlePos, v2: ParticlePos) {\n    return {x: v1.x / v2.x, y: v1.y / v2.y };\n  }\n\n  static multiply(v1: ParticlePos, v2: ParticlePos) {\n    return {x: v1.x * v2.x, y: v1.y * v2.y};\n  }\n\n  // magnitude\n  distanceTo(v: ParticlePos) {\n    const dx = this.x - v.x,\n      dy = this.y - v.y;\n\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  magnitude(v: ParticlePos) {\n    return Math.sqrt(v.x * v.x + v.y * v.y);\n  }\n\n  getSpeed () {\n    return Math.sqrt(this.vx * this.vx + this.vy * this.vy);\n  }\n\n  setSpeed(speed: number) {\n    const heading = this.getHeading();\n    this.vx = Math.cos(heading) * speed;\n    this.vy = Math.sin(heading) * speed;\n  }\n\n  getHeading() {\n    return Math.atan2(this.vy, this.vx);\n  }\n\n  setHeading(heading: number) {\n    const speed = this.getSpeed();\n    this.vx = Math.cos(heading) * speed;\n    this.vy = Math.sin(heading) * speed;\n  }\n\n  accelerate(ax: number, ay: number) {\n    this.vx += ax;\n    this.vy += ay;\n  }\n\n  ease(v: ParticlePos) {\n    let dx = v.x - this.x,\n      dy = v.y - this.y;\n\n    this.vx = dx * 0.05;\n    this.vy = dy * 0.05;\n  }\n\n  angleTo(p: ParticlePos) {\n    return Math.atan2(p.y - this.y, p.x - this.x);\n  }\n\n  // rejection (p: ParticleProps) {\n  //   let dx = this.x - p.x,\n  //     dy = this.y - p.y,\n  //     distance = Math.sqrt(dx * dx + dy * dy),\n  //     force = (1 * this.mass * p.mass * (p.mass === 10 ? 1 : -1)) / (distance * distance),\n  //     ax = dx / distance * force,\n  //     ay = dy / distance * force;\n  //\n  //   if (ax >= 0.001 || ax <= -0.001 || ay >= 0.001 || ay <= -0.001) {\n  //     this.vx += ax;\n  //     this.vy += ay;\n  //   } else {\n  //     this.vx = 0;\n  //     this.vy = 0;\n  //     if (p.mass <= 10) {\n  //       this.ease({x: this.hx, y: this.hy});\n  //     }\n  //   }\n  // }\n}\n","/Users/davidtaylor/stash_projects/fantarka-music/src/lib/utils.ts",["111","112"],"const SOUNDCLOUD_ARTIST_URL = 'https://soundcloud.com/fantarka';\nexport const rgbToString = (r: number, g: number, b: number, a: number): string => {\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\n\nexport const handleOnShareEvent = (evt: any, type: string) => {\n  switch (type) {\n    case 'sound-cloud':\n      window.open(SOUNDCLOUD_ARTIST_URL, '_blank');\n      return;\n    case 'email':\n      window.location.href = 'mailto:fantarkamusic@gmail.com?subject=Fantarka Music';\n      return;\n  }\n};\n","/Users/davidtaylor/stash_projects/fantarka-music/src/lib/index.tsx",["113","114"],"export { Particle } from './Particle';\nexport { rgbToString } from './utils';\n\n","/Users/davidtaylor/stash_projects/fantarka-music/src/components/control-button/control-button.tsx",["115","116","117"],"import React, { useState } from 'react';\n\nimport {\n  FontAwesomeIcon,\n} from '@fortawesome/react-fontawesome';\n\nimport { faPlay, faPause, faStepForward, faStepBackward, faAngleLeft, faAngleRight, faLongArrowAltDown } from '@fortawesome/free-solid-svg-icons';\n\nimport './control-button.scss';\n\nexport type ControlsType =  'backward' | 'down' | 'forward' | 'play' | 'pause' | 'previous' | 'next';\ninterface ControlButtonType {\n  iconType: ControlsType;\n  onClick: (t: ControlsType) => void;\n}\ntype ControlButtonState = {\n  active: boolean\n};\n\nconst icon = (i: ControlsType)  => {\n  switch(i) {\n    case 'forward':\n      return faStepForward;\n    case 'backward':\n      return faStepBackward;\n    case 'play':\n      return faPlay;\n    case 'pause':\n      return faPause;\n    case 'previous':\n      return faAngleLeft;\n    case 'next':\n      return faAngleRight;\n    case 'down':\n      return faLongArrowAltDown;\n  }\n}\n\nexport const ControlButton = ({iconType, onClick}: ControlButtonType) => {\n  const [active, setActive] = useState(false);\n  return (\n    <button className='control-button'\n            onClick={() => {\n              setActive(true);\n              onClick(iconType);\n            }}\n            onAnimationEnd={() => {\n              setActive(false);\n            }}>\n      {<div className={active ? 'control-button-ripple active' : 'control-button-ripple'}/>}\n      <FontAwesomeIcon icon={icon(iconType)} color=\"white\"/>\n    </button>\n  );\n}\nexport default ControlButton;\n","/Users/davidtaylor/stash_projects/fantarka-music/src/icons/soundcloud-icon.tsx",["118","119"],"import React from 'react';\n//style=\"fill:#030104;\"\n\nexport const SoundCloudLogo = ({width, height, onClick}: any) => {\n  return (\n    <button className=\"soundcloud-share\" onClick={(evt) => onClick(evt, 'soundCloud')}>\n      <svg x=\"0px\" y=\"0px\" viewBox='0 0 100 100' width={width} height={height}>\n        <g style={{fill: 'rgba(255, 85, 0, 1)'}}>\n          <path d=\"M3.361,67.281L5,60.279l-1.639-7.238c-0.045-0.215-0.457-0.379-0.959-0.379\nc-0.508,0-0.92,0.164-0.959,0.381L0,60.279l1.443,7.002c0.039,0.217,0.451,0.381,0.959,0.381\nC2.904,67.662,3.316,67.498,3.361,67.281z M13.611,71.168L15,60.348l-1.389-16.74c-0.041-0.426-0.561-0.76-1.191-0.76\nc-0.635,0-1.156,0.334-1.188,0.76L10,60.348l1.232,10.82c0.031,0.422,0.553,0.756,1.188,0.756\nC13.051,71.924,13.57,71.594,13.611,71.168z M23.84,70.99L25,60.354l-1.16-22.287c-0.031-0.523-0.648-0.934-1.404-0.934\nc-0.762,0-1.379,0.41-1.406,0.934L20,60.354l1.029,10.642c0.027,0.519,0.645,0.928,1.406,0.928\nC23.191,71.922,23.809,71.514,23.84,70.99z M34.049,70.832L35,60.355l-0.951-22.449c-0.023-0.621-0.727-1.107-1.6-1.107\nc-0.879,0-1.582,0.486-1.604,1.107L30,60.355l0.85,10.475c0.018,0.615,0.721,1.102,1.6,1.102\nC33.322,71.932,34.025,71.453,34.049,70.832z M44.248,70.699L45,60.359l-0.752-25.74c-0.016-0.707-0.818-1.281-1.787-1.281\nc-0.971,0-1.771,0.576-1.787,1.281L40,60.352c0,0.017,0.674,10.349,0.674,10.349c0.016,0.698,0.816,1.272,1.787,1.272\nC43.43,71.973,44.232,71.406,44.248,70.699z M51.391,71.98C51.424,71.982,86.883,72,87.114,72C94.232,72,100,66.42,100,59.537\nc0-6.885-5.768-12.465-12.887-12.465c-1.766,0-3.449,0.348-4.984,0.969C81.104,36.811,71.363,28,59.484,28\nc-2.906,0-5.742,0.553-8.244,1.488c-0.972,0.366-1.232,0.739-1.24,1.467v39.553C50.01,71.27,50.621,71.906,51.391,71.98z\"/>\n        </g>\n      </svg>\n    </button>\n  );\n};\n",{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"128","severity":1,"message":"129","line":107,"column":5,"nodeType":"130","endLine":107,"endColumn":23,"suggestions":"131"},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"128","severity":1,"message":"132","line":205,"column":6,"nodeType":"130","endLine":205,"endColumn":56,"suggestions":"133"},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"134","severity":1,"message":"135","line":16,"column":6,"nodeType":"136","messageId":"137","endLine":16,"endColumn":24},{"ruleId":"120","message":"121","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"122","message":"123","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},"additional-typescript-only-rule","Definition for rule 'additional-typescript-only-rule' was not found.","additional-rule","Definition for rule 'additional-rule' was not found.","no-native-reassign",["138"],"no-negated-in-lhs",["139"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["140"],"React Hook useEffect has a missing dependency: 'tracks.length'. Either include it or remove the dependency array.",["141"],"@typescript-eslint/no-unused-vars","'ControlButtonState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [activeAudioState, dispatch]",{"range":"146","text":"147"},"Update the dependencies array to be: [previousTrackActive, trackActive, trackParticles, tracks.length]",{"range":"148","text":"149"},[3404,3422],"[activeAudioState, dispatch]",[6342,6392],"[previousTrackActive, trackActive, trackParticles, tracks.length]"]